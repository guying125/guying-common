##定义初始变量
#set($className = $tool.append($tableInfo.name, "Controller"))
#set($beanDTO = $tool.append($tableInfo.name, "DTO"))
#set($beanRequest = $tool.append($tableInfo.name, "Request"))
#set($beanResponse = $tool.append($tableInfo.name, "Response"))
#set($dtoAssembler = $tool.append($tableInfo.name, "Assembler"))
#set($appService = $tool.append($tableInfo.name, "Service"))

##设置回调
$!callback.setFileName($tool.append($className, ".java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/adapter/controller/easycodegenerate"))
##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}adapter.controller.easycodegenerate;

import $!{tableInfo.savePackageName}.adapter.model.request.$!{beanRequest};
import $!{tableInfo.savePackageName}.adapter.model.response.$!{beanResponse};
import $!{tableInfo.savePackageName}.application.easycodegenerate.assembler.$!{dtoAssembler};
import $!{tableInfo.savePackageName}.application.easycodegenerate.service.$!{appService};
import $!{tableInfo.savePackageName}.application.easycodegenerate.wrapper.dto.$!{beanDTO};
import com.guying.fourlayer.infrastructure.commons.global.UniResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * $!{tableInfo.comment}($!{tableInfo.name})表控制层
 *
 * @author $!author
 * @since $!time.currTime()
 */
@RequiredArgsConstructor
@Slf4j
@RestController
@RequestMapping("/$!tool.firstLowerCase($tableInfo.name)")
public class $!{className} {

private final $!{appService} $!tool.firstLowerCase($appService);

/**
 * 分页查询
 *
 * @param $!{tool.firstLowerCase($beanRequest)} 筛选条件
 * @param pageRequest      分页对象
 * @return 查询结果
 */
@GetMapping
public UniResponse<Page<$!{beanResponse}>>queryByPage($!{beanRequest} $!{tool.firstLowerCase($beanRequest)},PageRequest pageRequest){
        return UniResponse.of(this.$!{tool.firstLowerCase($appService)}.queryByPage($!{tool.firstLowerCase($beanRequest)},pageRequest));
        }

/**
 * 通过主键查询单条数据
 *
 * @param id 主键
 * @return 单条数据
 */
@GetMapping("{id}")
public UniResponse<$!{beanResponse}> queryById(@PathVariable("id") $!pk.shortType id){
        return UniResponse.of(this.$!{tool.firstLowerCase($appService)}.queryById(id));
        }

/**
 * 新增数据
 *
 * @param $!{tool.firstLowerCase($beanRequest)} 请求参数
 * @return 新增结果
 */
@PostMapping
public UniResponse<$!{beanResponse}> add(@RequestBody $!{beanRequest} $!{tool.firstLowerCase($beanRequest)}){
        return UniResponse.of(this.$!{tool.firstLowerCase($appService)}.insert($!{tool.firstLowerCase($beanRequest)}));
        }

/**
 * 编辑数据
 *
 * @param $!{tool.firstLowerCase($beanRequest)} 请求参数
 * @return 编辑结果
 */
@PutMapping
public UniResponse<$!{beanResponse}> edit($!{beanRequest} $!{tool.firstLowerCase($beanRequest)}){
        return UniResponse.of(this.$!{tool.firstLowerCase($appService)}.update($!{tool.firstLowerCase($beanRequest)}));
        }
}